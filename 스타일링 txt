css 스타일링

준비-

1. create-react-app 을 통하여 리액트 프로젝트를 생성
2. yarn eject 명령어를 실행(node_modules/react-scripts 경로에 내장되어있는 리액트 프로젝트의 환경설정 파일들이 프로젝트 루트 경로로 이동)

CSS 모듈로 스타일링하기--------------------

1. 웹팩 설정으로 가서 CSS Module 을 활성화(config/webpack.config.dev.js 를 열어서 css-loader 확인)  : 우리가 개발 할 때 사용하는 웹팩 개발 서버 전용 설정
2. CSS 를 불러오기 위해 총 3가지의 로더가 사용.
  - style-loader 가 스타일들을 불러와서 페이지에서 활성화
  - css-loader 는 css 파일에서 import 와 url(...) 문들을 webpack 의 require 기능을 통하여 처리
  - postcss-loader 의 경우에는, 우리가 입력한 CSS 구문이 모든 브라우저에서 제대로 작동할 수 있도록 자동으로 -webkit, -mos, -ms 등의 접두사를 처리

3. css-loader 의 options에서 CSS Module 을 사용 하도록 설정

        modules: true, //  CSS Module 을 활성화 하는 속성
        localIdentName: '[path][name]__[local]--[hash:base64:5]' // CSS Module 에서 고유적으로 생성되는 클래스네임의 형식을 정해줌

4. config/webpack.config.prod.js 열어서 css-loader 설정 추가 : 나중에 리액트 프로젝트를 완성하고 배포하게 될 때 빌드하는 과정에서 사용되는 환경설정 파일      

        modules: true,





--- css 모듈 tip



1. 해당 요소가 속한 class 가 여러 개일 땐? : 'classNames' 라이브러리를 사용
  
  : 만약 .box class와 .blue class가 있다고 치면,
  js 파일에서 css 모듈을 적용시킬 땐
  className={[styles.box, styles.blue].join(' ')}
  와 같이 해주면 된다. 결국 styles.box도 styles.blue도 문자열에 불과하므로
  공백을 사이에 두고 이어붙여준 문자열을 그대로 입력하면 됨


  하지만 위 코드가 귀찮으므로 classnames library를 설정해서 사용하자.

  'yarn add classnames'

  이 라이브러리를 설치하고나서부터는

  className={classNames(styles.box, styles.blue)} 과 같이 입력해주면 됨.

  혹은 classNames의 bind 기능을 이용해보자.

  import classNames from 'classnames/bind';
  const cx = classNames.bind(styles); // cx(box) = styles.box 

  상기 두 코드를 추가한 뒤

  <div className={cx('box', 'blue')}> // className={ styles.box styles.blue }


  classNames 를 이용하면, 객체형식으로 혹은 배열 형식으로도 ClassName을 전달할 수 있다.


  <div className={cx('box', {  
          blue: isBlue
      })}>

  이를 응용하면 isBlue 값을 state로 받아와서 user의 입력 값에 따라 isBLue 값을 변경시켜
  css 를 적용할 수도 있는 것임.



--- scss-------------------

1. 두 패키지를 설치
    yarn add node-sass sass-loader 
    // sass-loader 는 webpack 에서 sass 파일들을 읽어오는 역할
    // node-sass 는 sass 로 작성된 코드들을 CSS 로 변환

2. 웹팩환경설정을 수정
   css-loader 설정 부분 하단에 
   css-loader 설정 { test: /\.css$/, .... } 을 그대로 복사하여 
   아래에 복붙하고 test 의 value를 /\.scss$/ 로 고쳐줌.

   그리고 css-loader 룰 바로 아래에 scss-loader

    {
      loader: require.resolve('sass-loader'),
    },

    를 복붙.

3. webpack.config.dev.js 말고 --.prod.js에서도 똑같이 해준다.


-------- scss 사용 팁

1. 믹스인 

@mixin place-at-center() {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

하고 상단에 정의하고 @inclue '믹스인 이름' 을 통해 호출할 수 있다.


2. 모든 scss 파일에서 공통적으로 믹스인을 사용하고 싶은 경우에는 src 폴더에 따로
    utils.scss 파일을 만들고 그 안에 믹스인과 변수를 넣은 뒤 다른 scss 파일에서
    @import './styles/utils' 와 같은 식으로 불러서 사용 가능하다.

3. scss 파일 import 할 때
복잡한 상대 경로를 작성하는걸 피하기 위해서, webpack 에서 sass-loader를 설정 할 때
includePaths 라는 설정을 통하여 경로를 간소화 할 수 있음

4. config/paths.js – 하단부에

    styles: resolveApp('src/styles')

    를 추가

5. 'webpack.config.dev.js' 와 '--.prod.js' 안의 sass-loader 안에

    options: {
                  includePaths: [paths.styles]
                }
    
    를 추가



    ** scss 라이브러리 추천

    include-media : 반응성 웹페이지 디자인에 용이
    
    open-color : 색

